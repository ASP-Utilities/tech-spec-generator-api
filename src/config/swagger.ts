import swaggerJsdoc from 'swagger-jsdoc';
import { writeFileSync } from 'fs';
import path from 'path';
import logger from './logger.js';

const options: swaggerJsdoc.Options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'Tech Spec Generator API',
      version: '1.0.0',
      description: 'Backend API for Tech Spec Generator - handles chat history storage with PostgreSQL and GCP integration',
      contact: {
        name: 'API Support',
      },
    },
    servers: [
      {
        url: 'http://localhost:3001',
        description: 'Development server',
      },
      {
        url: 'https://your-production-url.com',
        description: 'Production server',
      },
    ],
    components: {
      schemas: {
        Message: {
          type: 'object',
          required: ['role', 'content'],
          properties: {
            role: {
              type: 'string',
              enum: ['user', 'model'],
              description: 'The role of the message sender',
            },
            content: {
              type: 'string',
              description: 'The content of the message',
            },
            timestamp: {
              type: 'string',
              format: 'date-time',
              description: 'Optional timestamp of the message',
            },
          },
        },
        ChatSession: {
          type: 'object',
          required: ['sessionId', 'messages', 'timestamp'],
          properties: {
            sessionId: {
              type: 'string',
              description: 'Unique identifier for the chat session',
            },
            messages: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/Message',
              },
              description: 'Array of messages in the chat session',
            },
            timestamp: {
              type: 'string',
              format: 'date-time',
              description: 'Timestamp when the session was created',
            },
            metadata: {
              type: 'object',
              properties: {
                userAgent: {
                  type: 'string',
                },
                clientVersion: {
                  type: 'string',
                },
              },
              description: 'Optional metadata about the session',
            },
          },
        },
        SaveChatRequest: {
          type: 'object',
          required: ['messages'],
          properties: {
            sessionId: {
              type: 'string',
              description: 'Optional session ID. If not provided, server will generate one.',
            },
            messages: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/Message',
              },
              minItems: 1,
              description: 'Array of messages (must not be empty)',
            },
            timestamp: {
              type: 'string',
              format: 'date-time',
              description: 'Optional timestamp. Defaults to current server time if not provided.',
            },
          },
        },
        SaveChatResponse: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              description: 'Whether the operation was successful',
            },
            sessionId: {
              type: 'string',
              description: 'The session ID (generated by server if not provided)',
            },
            message: {
              type: 'string',
              description: 'Success message',
            },
          },
        },
        ErrorResponse: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: false,
            },
            error: {
              type: 'string',
              description: 'Error type',
            },
            message: {
              type: 'string',
              description: 'Detailed error message',
            },
          },
        },
        HealthResponse: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
            },
            status: {
              type: 'string',
              enum: ['healthy', 'degraded'],
              description: 'Overall system health status',
            },
            timestamp: {
              type: 'string',
              format: 'date-time',
            },
            uptime: {
              type: 'number',
              description: 'Server uptime in seconds',
            },
            database: {
              type: 'object',
              properties: {
                connected: {
                  type: 'boolean',
                  description: 'Database connection status',
                },
                sessionCount: {
                  type: 'number',
                  description: 'Number of stored chat sessions',
                },
              },
            },
            environment: {
              type: 'string',
              description: 'Current environment (development/production)',
            },
          },
        },
      },
    },
    tags: [
      {
        name: 'Health',
        description: 'System health and monitoring endpoints',
      },
      {
        name: 'Chat Sessions',
        description: 'Chat session management endpoints',
      },
    ],
  },
  apis: ['./src/routes/*.ts', './src/controllers/*.ts'],
};

export const swaggerSpec = swaggerJsdoc(options);

// Export spec to JSON file
const specPath = path.join(process.cwd(), 'techspecgen_swagger.json');
writeFileSync(specPath, JSON.stringify(swaggerSpec, null, 2));
logger.info({ context: { specPath } }, 'Swagger spec exported');

export default swaggerSpec;

